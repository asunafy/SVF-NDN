#define Wn 3;
#define Rn 2;
#define En 4;
#define N 5;
#define DKn 2;

enum{R,W,DN,H_K,DKN,NKN,K,K1,K2,K_I,K_C,K_A,DK,DATA,NK_e,NK_d};
enum{H_K_1,H_K_2,H_K_3,H_K_4,H_K_5,NONE};
enum{Reject};

channel ComRW 0;
channel FakeRW1 0;
channel FakeRW2 0;
var data_decryption_success = false;
var data_leakage_success = false;
var data_acquisition_success = false;
var index = 0;
var hit = false;
var reEn = H_K_3;
var cuEn = H_K_4;
var is_rejected = false;
var temp1;
var temp2;
var temp3;
var temp4;
var array = [H_K_1,H_K_2,H_K_3,H_K_4];

#define getData(k1,k2,dk,data,k3,dk1,k)
{data_decryption_success=false;
if(k2==k3&&k1==k&&
dk==DK&&dk1==DK&&
data==DATA)
{data_decryption_success=true}};

#define Revoke(H_k)
{index = 0;
hit = false;
while(index >= 0 && index < En) {
if(array[index] == H_k){
array[index] = NONE;
}
index++;
}
};

#define checkEntry(H_k)
{index = 0;
hit = false;
while(index >= 0 && index < En) {
if(array[index] == H_k){
hit = true;
}
index++;
}
};

READER(r,w,k,dn,H_k) = 
         Initialization{data_decryption_success=false;cuEn=H_k;} -> (ComRW!r.w.dn.H_k ->(ComRW?Reject{is_rejected=true;} -> Skip[]ComRW?w.r.dkn.k1.k2 -> ComRW!r.w.dn -> ComRW?w.r.dk.data -> ComRW!r.w.dkn -> ComRW?w.r.k3.dk1{call(getData,k1,k2,dk,data,k3,dk1,k)} -> Skip)
         []FakeRW1!r.w.dn.H_k.k ->(FakeRW1?Reject{is_rejected=true;} -> Skip[]FakeRW1?w.r.dkn.k1.k2 -> FakeRW1!r.w.dn -> FakeRW1?w.r.dk.data -> FakeRW1!r.w.dkn -> FakeRW1?w.r.k3.dk1{call(getData,k1,k2,dk,data,k3,dk1,k)} -> Skip))
        ;READER(r,w,k,dn,H_k);
        
WRITER(w,r,k,k1,dkn,data,dk) = 
       ((ComRW?r.w.dn.H_k{call(Revoke,reEn);call(checkEntry,H_k)} -> case{hit==true: ComRW!w.r.dkn.k1.k -> ComRW?r.w.dn -> ComRW!w.r.dk.data -> ComRW?r.w.dkn -> ComRW!w.r.k.dk -> Skip default: ComRW!Reject -> Skip})
                                             [](FakeRW2?r.w.dn.H_k.k1{call(Revoke,reEn);call(checkEntry,H_k)} -> case{hit==true: FakeRW2!w.r.dkn.k1.k -> FakeRW2?r.w.dn -> FakeRW2!w.r.dk.data -> FakeRW2?r.w.dkn -> FakeRW2!w.r.k.dk -> Skip default: FakeRW2!Reject -> Skip}));WRITER(w,r,k,k1,dkn,data,dk);
         
INTUDER() =
     Initialization{data_leakage_success=false;} ->FakeRW1?r.w.dn.H_k -> FakeRW2!r.w.dn.H_k -> (FakeRW2?Reject -> FakeRW1!Reject -> Skip[]FakeRW2?w.r.dkn.k1.k2 -> (FakeRW1!w.r.dkn.k1.k2{temp1=k1;temp2=k2} -> Skip[]FakeRW1!w.r.dkn.k1.K_I -> Skip);FakeRW1?r.w.dn -> FakeRW2!r.w.dn 
     -> FakeRW2?w.r.dk.data -> FakeRW1!w.r.dk.data -> FakeRW1?r.w.dkn -> FakeRW2!r.w.dkn -> FakeRW2?w.r.k3.dk1{call(getData,temp1,temp2,dk,data,k3,dk1,K_I);if(data_decryption_success==true){data_leakage_success=true}} -> FakeRW1!w.r.k3.dk1 -> Skip);INTUDER();

System_New() = READER(R,W,K1,DN,H_K_4)||WRITER(W,R,K2,K1,DKN,DATA,DK)||INTUDER();
System_New_re() = READER(R,W,K1,DN,H_K_3)||WRITER(W,R,K2,K1,DKN,DATA,DK)||INTUDER();

#define Data_Acq_Success data_decryption_success==true;
#define Data_Leak_Success data_leakage_success==true;
#define Revoked_Entity_Denied_Success ((cuEn==reEn)&&(is_rejected==true)) || ((cuEn!=reEn)&&(is_rejected==false));

#assert System_New() deadlockfree;
#assert System_New_re() deadlockfree;
#assert System_New() reaches Data_Acq_Success;
#assert System_New_re() reaches Data_Acq_Success;
#assert System_New() |= []!Data_Leak_Success;
#assert System_New_re() |= []!Data_Leak_Success;
#assert System_New() |= <>[] Revoked_Entity_Denied_Success;
#assert System_New_re() |= <>[] Revoked_Entity_Denied_Success;
